import * as fs from "node:fs";
import { generateCode, loadFile, parseModule } from "magicast";
import { format } from "prettier";

import type { StatusPageInfo } from "../src/types";

type DataModule = StatusPageInfo & {
  [key: string]: StatusPageInfo;
};

async function run() {
  const files = (await fs.promises.readdir("src/data")).filter(
    (file) => file !== "index.ts" && file.endsWith(".ts"),
  );

  const data = await getDataFileExports(files);

  generateDataIndex(files, data);
  generateAddDomainToStatusPageUrls(data);
}

run();

async function getDataFileExports(files: string[]) {
  return Promise.all(
    files.map((file) => import(`../src/data/${file}`) as Promise<DataModule>),
  );
}

async function generateDataIndex(files: string[], data: DataModule[]) {
  let code = `/**
  * This file is auto-generated by scripts/generateMapping.ts
  * Do not modify this file manually.
  *
  * Regenerate this file by running \`yarn generate\`
  */\n\n`;

  data.forEach(
    ({ name, statusPageUrl, domains, isOperational, ...rest }, index) => {
      const key = Object.keys(rest)[0];
      code += `export { ${key} } from "./${files[index]?.replace(".ts", "")}";\n`;
    },
  );

  await fs.promises.writeFile(
    "src/data/index.ts",
    await format(code, { parser: "typescript" }),
  );
}

async function generateAddDomainToStatusPageUrls(data: DataModule[]) {
  const mod = await loadFile("./templates/default_domainToStatusPageUrls.ts");

  for (const { domains, statusPageUrl } of data) {
    domains.forEach((domain) => {
      // TODO: Modify the AST to make is `as const`.
      mod.exports.domainToStatusPageUrls[domain] = statusPageUrl;
    });
  }

  const { code } = generateCode(mod);

  await fs.promises.writeFile(
    "src/mapping/domainToStatusPageUrls.ts",
    await format(code, { parser: "typescript" }),
  );
}
